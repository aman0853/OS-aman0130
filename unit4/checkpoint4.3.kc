
import "string"

#pragma link("mega65hyper.ld")
// Some definitions of addresses and special values that this program uses
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

volatile unsigned char *current_screen_line;
volatile unsigned char current_screen_x;

// Some text to display
char[] MESSAGE = "checkpoint4.3 by aman0130";



void main() {

*VIC_MEMORY = 0x14;

memset(SCREEN, ' ', 40*25);

memset(COLS, WHITE, 40*25);

char* sc = SCREEN+40;  // Display it one line down on the screen
char* msg = MESSAGE; // The messag to display

while(*msg) {
*sc++ = *msg++;
}
// Loop forever showing two white lines as raster bars
while(true) {
if(*RASTER==54 || *RASTER==66) {
*BGCOL = WHITE;
} else {
*BGCOL = BLACK;
}
}
}


void syscall1() {
*(SCREEN+79) = '}';
print_to_screen("checkpoint4.3 by aman0130");
print_newline();
print_to_screen("syscall00 entered");
print_newline();
exit_hypervisor();
}
void syscall2() {
*(SCREEN+78) = '{';
print_to_screen("syscall01 entered");
print_newline();
exit_hypervisor();
}
// Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.
#pragma data_seg(Syscall)

struct SysCall {
char xjmp;

void()* syscall;   
char xnop;
// Holds $EA, the NOP opcode
};

const char JMP = 0x4c;
const char NOP = 0xea;




void start_simple_program()
{
*(unsigned char *)$0300 =$80;
*(unsigned char *)$0301 =$00;
*(unsigned char *)$0302 =$81;
*(unsigned char *)$0303 =$00;
*(unsigned char *)$0304 =$00;
*(unsigned char *)$0305 =$00;
*(unsigned char *)$0306 =$00;
*(unsigned char *)$0307 =$60;
*(unsigned char *)$0308 =$02;
*(unsigned char *)$0309 =$00;
*(unsigned char *)$030A =$02;
*(unsigned char *)$030B =$01;
*(unsigned char *)$030C =$08;
*(unsigned char *)$030D =$00;
*(unsigned char *)$030E =$00;
*(unsigned char *)$030F =$00;
*(unsigned char *)$0310 =$60;
*(unsigned char *)$D701 =$03;
*(unsigned char *)$D702 =$00;
*(unsigned char *)$D705 =$00;
*(unsigned short *)$D648 =$080D;
exit_hypervisor();
}




void print_to_screen(char *message) {
char* sc =current_screen_line+current_screen_x;
char* msg = message;
while(*msg){
*sc++=*msg++;
current_screen_x ++;
}
while(current_screen_x>=40){
current_screen_x-=40;
current_screen_line +=1;
}


}


void print_newline(){
current_screen_line+=40;
current_screen_x = 0;


while(current_screen_line>=(SCREEN+40*25)){
current_screen_line-=25;
}


}




export struct SysCall[] SYSCALLS = {
{ JMP, &syscall1, NOP },
{ JMP, &syscall2, NOP },
{ JMP, &syscall3, NOP },
{ JMP, &syscall4, NOP },
{ JMP, &syscall5, NOP },
{ JMP, &syscall6, NOP },
{ JMP, &syscall7, NOP },
{ JMP, &syscall8, NOP },
{ JMP, &syscall9, NOP },
{ JMP, &syscall10, NOP },
{ JMP, &syscall11, NOP },
{ JMP, &syscall12, NOP },
{ JMP, &syscall13, NOP },
{ JMP, &syscall14, NOP },
{ JMP, &syscall15, NOP },
{ JMP, &syscall16, NOP },
{ JMP, &syscall17, NOP },
{ JMP, &syscall18, NOP },
{ JMP, &syscall19, NOP },
{ JMP, &syscall20, NOP },
{ JMP, &syscall21, NOP },
{ JMP, &syscall22, NOP },
{ JMP, &syscall23, NOP },
{ JMP, &syscall24, NOP },
{ JMP, &syscall25, NOP },
{ JMP, &syscall26, NOP },
{ JMP, &syscall27, NOP },
{ JMP, &syscall28, NOP },
{ JMP, &syscall29, NOP },
{ JMP, &syscall30, NOP },
{ JMP, &syscall13, NOP },
{ JMP, &syscall32, NOP },
{ JMP, &syscall33, NOP },
{ JMP, &syscall34, NOP },
{ JMP, &syscall35, NOP },
{ JMP, &syscall36, NOP },
{ JMP, &syscall37, NOP },
{ JMP, &syscall38, NOP },
{ JMP, &syscall39, NOP },
{ JMP, &syscall40, NOP },
{ JMP, &syscall41, NOP },
{ JMP, &syscall42, NOP },
{ JMP, &syscall43, NOP },
{ JMP, &syscall44, NOP },
{ JMP, &syscall45, NOP },
{ JMP, &syscall46, NOP },
{ JMP, &syscall47, NOP },
{ JMP, &syscall48, NOP },
{ JMP, &syscall49, NOP },
{ JMP, &syscall50, NOP },
{ JMP, &syscall51, NOP },
{ JMP, &syscall52, NOP },
{ JMP, &syscall53, NOP },
{ JMP, &syscall54, NOP },
{ JMP, &syscall55, NOP },
{ JMP, &syscall56, NOP },
{ JMP, &syscall57, NOP },
{ JMP, &syscall58, NOP },
{ JMP, &syscall59, NOP },
{ JMP, &syscall60, NOP },
{ JMP, &syscall61, NOP },
{ JMP, &syscall62, NOP },
{ JMP, &syscall63, NOP },
{ JMP, &syscall64, NOP }
};

void exit_hypervisor()
{
// Trigger exit from Hypervisor mode
   *(unsigned char *)$D67F = $01;
}
//syscall functions
void syscall3()
{
   exit_hypervisor();
}

void syscall4()
{
   exit_hypervisor();
}

void syscall5()
{
   exit_hypervisor();
}

void syscall6()
{
   exit_hypervisor();
}

void syscall7()
{
   exit_hypervisor();
}

void syscall8()
{
   exit_hypervisor();
}

void syscall9()
{
   exit_hypervisor();
}

void syscall10()
{
   exit_hypervisor();
}

void syscall11()
{
   exit_hypervisor();
}

void syscall12()
{
   exit_hypervisor();
}

void syscall13()
{
   exit_hypervisor();
}

void syscall14()
{
   exit_hypervisor();
}

void syscall15()
{
   exit_hypervisor();
}

void syscall16()
{
   exit_hypervisor();
}

void syscall17()
{
   exit_hypervisor();
}

void syscall18()
{
   exit_hypervisor();
}

void syscall19()
{
   exit_hypervisor();
}

void syscall20()
{
   exit_hypervisor();
}

void syscall21()
{
   exit_hypervisor();
}


void syscall22()
{
   exit_hypervisor();
}

void syscall23()
{
   exit_hypervisor();
}

void syscall24()
{
   exit_hypervisor();
}

void syscall25()
{
   exit_hypervisor();
}

void syscall26()
{
   exit_hypervisor();
}

void syscall27()
{
   exit_hypervisor();
}

void syscall28()
{
   exit_hypervisor();
}

void syscall29()
{
   exit_hypervisor();
}

void syscall30()
{
   exit_hypervisor();
}

void syscall31()
{
   exit_hypervisor();
}

void syscall32()
{
   exit_hypervisor();
}

void syscall33()
{
   exit_hypervisor();
}

void syscall34()
{
   exit_hypervisor();
}

void syscall35()
{
   exit_hypervisor();
}

void syscall36()
{
   exit_hypervisor();
}

void syscall37()
{
   exit_hypervisor();
}

void syscall38()
{
   exit_hypervisor();
}

void syscall39()
{
   exit_hypervisor();
}

void syscall40()
{
   exit_hypervisor();
}

void syscall41()
{
   exit_hypervisor();
}

void syscall42()
{
   exit_hypervisor();
}

void syscall43()
{
   exit_hypervisor();
}

void syscall44()
{
   exit_hypervisor();
}

void syscall45()
{
   exit_hypervisor();
}

void syscall46()
{
   exit_hypervisor();
}

void syscall47()
{
   exit_hypervisor();
}

void syscall48()
{
   exit_hypervisor();
}

void syscall49()
{
   exit_hypervisor();
}

void syscall50()
{
   exit_hypervisor();
}

void syscall51()
{
   exit_hypervisor();
}


void syscall52()
{
   exit_hypervisor();
}

void syscall53()
{
   exit_hypervisor();
}

void syscall54()
{
   exit_hypervisor();
}

void syscall55()
{
   exit_hypervisor();
}

void syscall56()
{
   exit_hypervisor();
}

void syscall57()
{
   exit_hypervisor();
}

void syscall58()
{
   exit_hypervisor();
}

void syscall59()
{
   exit_hypervisor();
}

void syscall60()
{
   exit_hypervisor();
}

void syscall61()
{
   exit_hypervisor();
}

void syscall62()
{
   exit_hypervisor();
}

void syscall63()
{
   exit_hypervisor();
}

void syscall64()
{
   exit_hypervisor();
}

void undefined_trap()
{

}
//This is the reset function
void RESET()
{

current_screen_line = $0400;
current_screen_x = 0;


*VIC_MEMORY = 0x14;

memset(SCREEN, ' ', 40*25);

memset(COLS, WHITE, 40*25);

char* sc = SCREEN+40;  
char* msg = MESSAGE; 


start_simple_program();



}
void PAGFAULT()
{

}

void RESTORKEY()
{

}

void ALTTABKEY()
{

}

void VF011RD()
{

}

void VF011WR()
{

}

void RESERVED()
{

}

void CPUKIL()
{

}


export align(0x100) struct SysCall[] TRAPS = {
{ JMP, &RESET, NOP },
{ JMP, &PAGFAULT, NOP },
{ JMP, &RESTORKEY, NOP },
{ JMP, &ALTTABKEY, NOP },
{ JMP, &VF011RD, NOP },
{ JMP, &VF011WR, NOP },
{ JMP, &RESERVED, NOP },
{ JMP, &CPUKIL, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP },
{ JMP, &undefined_trap, NOP }
};